# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2018-04-19 09:38
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='邮箱')),
                ('name', models.CharField(max_length=64, verbose_name='姓名')),
                ('phone', models.BigIntegerField(blank=True, null=True, verbose_name='手机号')),
                ('weixin', models.CharField(blank=True, max_length=64, null=True, verbose_name='微信号')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否可登录')),
                ('is_admin', models.BooleanField(default=False, verbose_name='是否为管理员')),
                ('memo', models.TextField(blank=True, default=None, null=True, verbose_name='备注')),
                ('date_joined', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户表',
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='报警策略名称')),
                ('interval', models.IntegerField(default=300, verbose_name='报警间隔(s)')),
                ('recover_notice', models.BooleanField(default=True, verbose_name='故障恢复后是否发送通知')),
                ('recover_subject', models.CharField(blank=True, max_length=128, null=True, verbose_name='恢复通知主题')),
                ('recover_message', models.TextField(blank=True, null=True, verbose_name='恢复通知内容')),
                ('enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '报警策略表',
            },
        ),
        migrations.CreateModel(
            name='ActionOperation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='报警动作名称')),
                ('action_type', models.CharField(choices=[('email', '邮件'), ('sms', '短信'), ('weixin', '微信'), ('script', '脚本')], default='email', max_length=64, verbose_name='动作类型')),
                ('step', models.IntegerField(verbose_name='报警升级阈值')),
                ('script_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='脚本名称')),
                ('msg_format', models.TextField(default='主机({hostname},{ip}) 应用集({name})存在问题,内容:{msg}', verbose_name='消息格式')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('userprofiles', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
            options={
                'verbose_name_plural': '报警动作表',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='应用集名称')),
                ('plugin_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='插件名称')),
                ('interval', models.IntegerField(default=60, verbose_name='监控间隔')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '应用集表',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(help_text='agen输入cmdb客户端配置文件中hostname，snmp输入管理IP', max_length=64, unique=True, verbose_name='主机名称')),
                ('ip', models.GenericIPAddressField(verbose_name='IP')),
                ('monitor_by', models.CharField(choices=[('agent', '客户端'), ('snmp', 'SNMP')], max_length=64, verbose_name='监控方式')),
                ('status', models.IntegerField(choices=[(1, '在线'), (2, '宕机'), (3, '未知'), (4, '下线'), (5, '问题')], default=3, verbose_name='主机状态')),
                ('host_alive_check_interval', models.IntegerField(default=30, verbose_name='主机存活状态检测间隔')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '主机表',
            },
        ),
        migrations.CreateModel(
            name='HostGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='主机组名称')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '主机组表',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='监控项名称')),
                ('key', models.CharField(max_length=64, unique=True, verbose_name='键值')),
                ('data_type', models.CharField(choices=[('int', '整数'), ('float', '小数'), ('str', '字符串')], max_length=64, verbose_name='数据类型')),
                ('unit', models.CharField(blank=True, max_length=64, null=True, verbose_name='数据单位')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '监控项表',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='模板名称')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('applications', models.ManyToManyField(blank=True, to='monitor_data.Application', verbose_name='所属应用集')),
            ],
            options={
                'verbose_name_plural': '模板表',
            },
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True, verbose_name='触发器名称')),
                ('severity', models.CharField(choices=[('information', '信息'), ('warning', '警告'), ('general', '一般严重'), ('high', '严重'), ('disaster', '灾难')], max_length=64, verbose_name='报警级别')),
                ('enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('templates', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_data.Template', verbose_name='所属模板')),
            ],
            options={
                'verbose_name_plural': '触发器表',
            },
        ),
        migrations.CreateModel(
            name='TriggerExpression',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator', models.CharField(choices=[('eq', '='), ('lt', '<'), ('gt', '>')], max_length=64, verbose_name='运算符')),
                ('threshold', models.IntegerField(verbose_name='阈值')),
                ('logic_with_next', models.CharField(blank=True, choices=[('or', 'OR'), ('and', 'AND')], max_length=64, null=True, verbose_name='与一个条件的逻辑关系')),
                ('data_calc_func', models.CharField(choices=[('avg', '平均值'), ('max', '最大值'), ('min', '最小值'), ('hit', 'HIT'), ('last', '最近的值')], default='last', max_length=64, verbose_name='数据运算函数')),
                ('data_calc_func_args', models.CharField(blank=True, max_length=64, null=True, verbose_name='数据运算函数的非固定参数,json格式')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('applications', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_data.Application', verbose_name='所属应用集')),
                ('items', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_data.Item', verbose_name='所属监控项')),
                ('triggers', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_data.Trigger', verbose_name='所属触发器')),
            ],
            options={
                'verbose_name_plural': '触发器表达式表',
            },
        ),
        migrations.AddField(
            model_name='hostgroup',
            name='templates',
            field=models.ManyToManyField(to='monitor_data.Template', verbose_name='所属模板'),
        ),
        migrations.AddField(
            model_name='host',
            name='host_groups',
            field=models.ManyToManyField(blank=True, to='monitor_data.HostGroup', verbose_name='所属主机组'),
        ),
        migrations.AddField(
            model_name='host',
            name='templates',
            field=models.ManyToManyField(blank=True, to='monitor_data.Template', verbose_name='所属模板'),
        ),
        migrations.AddField(
            model_name='application',
            name='items',
            field=models.ManyToManyField(blank=True, to='monitor_data.Item', verbose_name='所属监控项'),
        ),
        migrations.AddField(
            model_name='action',
            name='actionoperations',
            field=models.ManyToManyField(to='monitor_data.ActionOperation', verbose_name='所属报警动作'),
        ),
        migrations.AddField(
            model_name='action',
            name='triggers',
            field=models.ManyToManyField(to='monitor_data.Trigger', verbose_name='所属触发器'),
        ),
    ]
